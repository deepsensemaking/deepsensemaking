

#+BEGIN_SRC ipython :session *iPython* :eval yes :results raw drawer :exports both :shebang "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n" :var EMACS_BUFFER_DIR=(file-name-directory buffer-file-name) :tangle yes
            def plot_raw_data_carpetplot(
                    self,
                    raw0     = "raw0",
                    tt0       = None,
                    tt1       = None,
                    showFig  = False,
            ):
                self.BATCH.logger.info(
                    space0[0]+"RUNNING: {}.{}".format(
                        ".".join(self.INSP),
                        str(whoami()),
                ))
                self.BATCH.logger.info (space0[1]+"plotting raw data timeseries...")
                self.BATCH.logger.info (space0[1]+"processing: {}".format(repr(str( self    ))))
                self.BATCH.logger.info (space0[1]+"raw0: {}"      .format(repr(str( raw0    ))))
                self.BATCH.logger.info (space0[1]+"tt0: {}"        .format(repr(str( tt0   ))))
                self.BATCH.logger.info (space0[1]+"tt1: {}"        .format(repr(str( tt1   ))))


                if tt0 is None:
                    tt0 = self.data[raw0].times[0]

                if tt1 is None:
                    tt1 = self.data[raw0].times[-1]


                ii0 = self.data[raw0].time_as_index(tt0)
                ii1 = self.data[raw0].time_as_index(tt1)


                of_suff = ""
                of_suff = ".".join([of_suff,str(whoami()),raw0])
                of_suff = ".".join([of_suff,str(tt0),str(tt1)])
                of_suff = ".".join([of_suff,"png"])

                data0 = self.data[raw0].get_data()[:,int(ii0):int(ii1)]

                kern0 = np.hanning(5)   # a Hanning window with width 200
                kern0 /= kern0.sum()      # normalize the kernel weights to sum to 1

                hanning0 = ndimage.convolve1d(data0, kern0, 1)

                fig, ax = plt.subplots(1,1)
                img = imshow(
                    X             = hanning0[:,:],
                    aspect        = 'auto',
                    interpolation = 'none',
                )

                ax.set_yticks(range(len(self.data[raw0].ch_names)))
                ax.set_yticklabels(self.data[raw0].ch_names)

                fig.set_size_inches(16,8)
                title_old = fig.axes[0].get_title()
                title_new = "{} {} {}\n{} - {}".format(
                    title_old,
                    self.locs.of_stem,
                    raw0,
                    tt0,
                    tt1,
                )
                ## TODO FIXME no need to update title
                # fig.axes[0].set(title=title_new)

                # plt.tight_layout(pad=.5)
                if showFig:
                    (fig or plt).show()

                of_name = self.locs.of_base.with_suffix(of_suff)
                self.BATCH.logger.info (space0[1]+"of_name: {}".format(repr(str(of_name))))
                fig.savefig(of_name, dpi=fig.dpi,)


#+END_SRC
