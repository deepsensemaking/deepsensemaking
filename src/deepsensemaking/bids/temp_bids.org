

** Split path
*** Code

#+BEGIN_SRC ipython :session *iPython* :eval yes :results raw drawer :exports both :shebang "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n" :var EMACS_BUFFER_DIR=(file-name-directory buffer-file-name) :tangle yes

def split_path( iFile ):
    import os
    iPath, iName = os.path.split(iFile)
    iBase, iExtn = os.path.splitext(iName)
    if iFile.endswith(".nii.gz"):
        iBase = iName[:-len(".nii.gz")]
        iExtn = ".nii.gz"
    return iPath,iBase,iExtn

#+END_SRC

#+RESULTS:
:results:
# Out[347]:
:end:

*** Testing

#+BEGIN_SRC ipython :session *iPython* :eval yes :results raw drawer :exports both :shebang "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n" :var EMACS_BUFFER_DIR=(file-name-directory buffer-file-name) :tangle yes

iFile = "/dir1/dir2/dir3/file.name.nii.gz"

iTupl = split_path( iFile )
iPath, iBase, iExtn = split_path( iFile )

print("iTupl: " + str( iTupl ) )
print("iPath: " + str( iPath ) )
print("iBase: " + str( iBase ) )
print("iExtn: " + str( iExtn ) )

#+END_SRC

#+RESULTS:
:results:
# Out[348]:
# output
: iTupl: ('/dir1/dir2/dir3', 'file.name', '.nii.gz')
: iPath: /dir1/dir2/dir3
: iBase: file.name
: iExtn: .nii.gz
:
:end:

** Get BIDS properties
*** Code

#+BEGIN_SRC ipython :session *iPython* :eval yes :results raw drawer :exports both :shebang "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n" :var EMACS_BUFFER_DIR=(file-name-directory buffer-file-name) :tangle yes

def get_BIDS_prop( iFile, prop ):
    import re
    import os

    iPath,iBase,iExtn = split_path(iFile)

    r = re.compile( prop + "-(.*?)(?:_+)" )
    m = r.findall( iBase )
    if m:
        return m[0]
    else:
        return None

#+END_SRC

#+RESULTS:
:results:
# Out[351]:
:end:

*** Testing

#+BEGIN_SRC ipython :session *iPython* :eval yes :results raw drawer :exports both :shebang "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n" :var EMACS_BUFFER_DIR=(file-name-directory buffer-file-name) :tangle yes

iFile = "/home/user/data/sub-sb008_ses-03func_task-01easy02led03corr_run-02_bold_space-MNI152NLin2009cAsym_preproc.nii.gz"
subject = get_BIDS_prop( iFile, "sub" )
ses     = get_BIDS_prop( iFile, "ses" )
task    = get_BIDS_prop( iFile, "task" )
run     = get_BIDS_prop( iFile, "run" )
space   = get_BIDS_prop( iFile, "space" )

print("subject: " + subject)
print("    ses: " + ses)
print("   task: " + task)
print("    run: " + run)
print("  space: " + space)

#+END_SRC

#+RESULTS:
:results:
# Out[352]:
# output
: subject: sb008
:     ses: 03func
:    task: 01easy02led03corr
:     run: 02
:   space: MNI152NLin2009cAsym
:
:end:



#+BEGIN_SRC ipython :session *iPython* :eval yes :results raw drawer :exports both :shebang "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n" :var EMACS_BUFFER_DIR=(file-name-directory buffer-file-name) :tangle yes

import re
def get_bids_prop( if_name, prop ):
    r = re.compile( prop + "-(.*?)(?:_+)" )
    m = r.findall( if_name )
    if m:
        return m[0]
    else:
        return None

#+END_SRC


#+BEGIN_SRC ipython :session *iPython* :eval yes :results raw drawer :exports both :shebang "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n" :var EMACS_BUFFER_DIR=(file-name-directory buffer-file-name) :tangle yes


if_name = "sub-sb008_ses-03func_task-01easy02led03corr_run-02_bold_space-MNI152NLin2009cAsym_preproc.nii.gz"
print("  sub: " + get_BIDS_prop( iFile, "sub"  ))
print("  ses: " + get_BIDS_prop( iFile, "ses"  ))
print(" task: " + get_BIDS_prop( iFile, "task" ))
print("  run: " + get_BIDS_prop( iFile, "run"  ))
print("space: " + get_BIDS_prop( iFile, "space"))


#+END_SRC

#+RESULTS:
:results:
# Out[354]:
# output
:   sub: sb008
:   ses: 03func
:  task: 01easy02led03corr
:   run: 02
: space: MNI152NLin2009cAsym
:
:end:


#+BEGIN_SRC ipython :session *iPython* :eval yes :results raw drawer :exports both :shebang "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n" :var EMACS_BUFFER_DIR=(file-name-directory buffer-file-name) :tangle yes


get_BIDS_prop( iFile, "sub")
for item in ["sub","ses","task","run","space",]:
    print("{:>{}s}: ".format(item,7) + get_BIDS_prop( iFile, item  ) )



#+END_SRC

#+RESULTS:
:results:
# Out[362]:
# output
:     sub: sb008
:     ses: 03func
:    task: 01easy02led03corr
:     run: 02
:   space: MNI152NLin2009cAsym
:   sub: sb008
:   ses: 03func
:  task: 01easy02led03corr
:   run: 02
: space: MNI152NLin2009cAsym
:
:end:


#+BEGIN_SRC ipython :session *iPython* :eval yes :results raw drawer :exports both :shebang "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n" :var EMACS_BUFFER_DIR=(file-name-directory buffer-file-name) :tangle yes


from deepsensemaking.bids import get_bids_prop
from deepsensemaking.bids import ex_fname


def get_bids_prop( if_name, prop ):
    """
    Example usage:
    ==============
    from deepsensemaking.bids import get_bids_prop
    from deepsensemaking.bids import ex_fname
    print(get_bids_prop(if_name=ex_fname,prop="sub",))

    """
    r = re.compile( prop + r"-(.*?)(?:_+)" )
    r = re.compile( prop + r"-(.*?)(?:$)" )
    r = re.compile( prop + r"-(.*?)(?:_+|$)" )
    r = re.compile( prop + r"-(.*?)(?:_|$)" )
    m = r.findall( if_name )
    if m:
        return m[0]
    else:
        return None

ex_fname = "sub-sb0028_ses-03func_task-01easy02led03corr_run-02"
print(get_bids_prop(if_name=ex_fname,prop="sub",))
print(get_bids_prop(if_name=ex_fname,prop="run",))

#+END_SRC

#+RESULTS:
:results:
# Out[523]:
# output
: sb0028
: 02
:
:end:
